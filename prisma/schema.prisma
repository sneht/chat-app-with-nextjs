generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String        @unique
  username          String?
  profileImage      String?
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  lastLogin         DateTime?
  groups            GroupMember[]
  sentMessages      Message[]     @relation("SentMessages")
  otps              Otp[]
  chats             Chat[]        @relation("ChatToUser")
  emailVerified     DateTime?
  verificationToken String?       @unique
}

model Chat {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("ChatToUser")
}

model Message {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  createdAt DateTime @default(now())
  senderId  String   @db.Uuid
  groupId   String   @db.Uuid // Change chatId to groupId
  group     Group    @relation(fields: [groupId], references: [id]) // Change chat to group
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Group {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  profileImage String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  members      GroupMember[]
  messages     Message[] // Add this line
}

model GroupMember {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId   String   @db.Uuid
  groupId  String   @db.Uuid
  isAdmin  Boolean  @default(false)
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model Otp {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String
  otp        String   @db.Char(6)
  expires_at DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])

  @@map("otp")
}
